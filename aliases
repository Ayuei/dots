# http://github.com/mitchweaver/dots

[ -z "$SHELL" ] &&
    export SHELL=$0

case $SHELL in
    *ksh|*bash) true ;;
    *) return
esac

u() { 
    for _u ; do 
        unalias $_u || unset -f $_u
    done 2> /dev/null
}

u r w

alias a=alias

has() { 
    for _h ; do
        type $_h || return 1
    done > /dev/null 2>&1 
}

exists() {
    for _e ; do
        [ -e $_e ] || return 1
    done
}

has exa &&
    a ls='exa -F' ||
    a ls='ls -F'

case $(uname) in
    OpenBSD) export NPROC=$(sysctl -n hw.ncpu)
             a sudo=doas
             a seq=jot
             a rm='rm -P'
             a disks='sysctl -n hw.disknames'
             a disklabel='doas disklabel -h'
             a sg='sysctl | grep ji'
             a killall='pkill -9'
             a webcam='ffmpeg -i /dev/video0 -f sndio -i \
                 default "$(date)".mp4'
             pkg_del() { for i in $* quirks -a ; do 
                             doas pkg_delete $i 
                         done ; }
             pkg() { case "$1" in
                         add)    shift ; doas pkg_add -D snap $* ;;
                         del)    shift ; pkg_del $*              ;;
                         info)   shift ; pkg_info -D snap $*     ;;
                         search) shift ; pkg_info -D snap -Q $*  ;;
                         *) >&2 echo \?
                     esac ; }
             du() { [ $# -eq 0 ] && set .
                 command du -ahLd 1 "$1" 2> /dev/null | \
                     sort -rh | head -n 20 ; } ;;

    Linux) export NPROC="$(nproc)"
           a free='free -h'
           fdisk() { [ $# -eq 0 ] && set -- -l
                     fdisk $* ; }
           du() { [ $# -eq 0 ] && set .
               command du -ahL --max-depth=1 "$1" 2> /dev/null | \
                   sort -rh | head -n 20 ; }
           has crux && {
               prt='prt-get -im -is -if --install-scripts'
               pkg() { case "$1" in
                       add)    shift ; sudo $prt depinst $* ;;
                       update) shift ; sudo $prt update $*  ;;
                       del)    shift ; sudo $prt remove $*  ;;
                       deps)   shift ; prt-get deps $*      ;;
                       list)   shift ; pkginfo -i $*        ;;
                       search) shift ; prt-get search $*    ;;
                       info)   shift ; prt-get info $*      ;;
                       *) >&2 echo \?
                   esac ; }
           }
esac

c() { [ $# -eq 0 ] && printf "\033c" || cd "$1" ; }

a {cc,cll,clear,clar,clea}=c
a {x,xx,xxx,q,qq,qqq,:q,:Q,:wq,:w,exi}=exit
a {l,sls,sl}=ls
a ll='l -l'
a la='l -a'
a {lla,lal}='l -al'
a lsf='l "$PWD"/*'
a {cls,csl,cl,lc}='c;l'
a {e,ech,eho}=echo
a err='>&2 e'
a {Grep,gerp}=grep
a pg='pgrep'
a dg='du | grep -i'
a lg='ls | grep -i'
a cp='cp -irv'
a mv='mv -iv'
a {mkdir,mkd,mkdr}='mkdir -p'
a df='df -h'
a ln='ln -sf'
a ag='a | grep -i'
a tf='typeset -f'
a file='file -b -i -L'
a bn=basename
a {d,date}="cmd date '+%a %b %d - %l:%M %p'"
a {dmesg,dmegs}='dmesg | tail -n 20'
a pa='ps auwwx | head'
a ph='ps auwwx | grep -i -e ${USER} | head'
a man='man -a'
a ex=export
a cmd=command
a cx='chmod +x'
a chown='chown -R'
a {shutdown,poweroff}='sudo shutdown -p now'
a {reboot,restart}='sudo reboot'
a {mk,mkae}="make -j$(( $NPROC + 1 ))"
a mkc='mk clean'
a mki='mk install'
a mku='mk uninstall'
a mkall="mkc ; mk && mki"
a {xs,xc}='xsel -o ; e'
a rsync='rsync -rtvuh4 --progress --delete' #-c
a sshd='sudo /usr/sbin/sshd'
a scp='scp -rp4'
a {wtf,wtfismyip}='w3m https://wtfismyip.com'
a diff='git diff'
a {less,les}='less -QRd'
a {notepad,vtmp}='v /tmp/notepad'
a {suvim,suvi,suv}='sudo ${EDITOR}'
a view='${EDITOR} -R'
a {h,htpo,hto,ht,hpot,hotp,top}=htop
a {hm,hme}='h -u ${USER}'
a {hr,hroot}='h -u root'
a nf=neofetch
a {discline,discord}='dash ~/usr/bin/discline ; x'
a {rtv,reddit}="rtv --enable-media ; c"
a compton='k compton ; compton & c'
a feh='feh -q -N -x --scale-down'
a trans='trans -no-auto -b'
a rtrans='trans -from en -to'
a {w,weather}='curl -s wttr.in/Schmalkalden?m0TQ'
a forecast='curl -s http://wttr.in/Schmalkalden?m | \
    tail -n 33 | sed $\ d | sed $\ d'
a heart='printf "%b\n" "\xe2\x9d\xa4"'

dn()  { read i && set $i && e "$@" 1> /dev/null 2> /dev/stdout ; }
2dn() { read i && set $i && e "$@" 1> /dev/stdout 2> /dev/null ; }
null() { true ; }

mkcd() { mkd "$_" && cd "$_" ; }
mvcd() { mv "$1" "$2" && cd "$2" ; }
cpcd() { cp "$1" "$2" && cd "$2" ; }

for i in $(seq 9) ; do
    eval "m${i}() { export _MARK${i}=\$PWD ; }"
    eval "g${i}() { cd \$_MARK${i} ; }"
done

run() { 
    [ $# -lt 2 ] && exit 1
    local c=$1 ; shift
    for i in $(seq $c) ; do 
        "$@"
    done 
}

f() { 
    case $# in
        1) set . "$1" ;;
        0) read inp && set . "$inp"
    esac

    find "$1" ! -path "$1" -iname "*$2*" ; 
}

hg() { [ $# -gt 0 ] && grep -e "$@" $HISTFILE | head -n 20 ; }

ext() { e "${1##*.}" ; }
filename() { e "${1%.*}" ; }
cheat() { curl -s cheat.sh/$1 ; }
rgb2hex() { printf "#%02x%02x%02x\n" "$@" ; }

reload() { . ~/etc/aliases
           xrdb load ~/etc/Xresources
           xmodmap ~/etc/Xmodmap
           xset m 0 0 
           xset b off 
           xset +fp /home/mitch/.fonts
           set fp rehash
           fc-cache ; } 2> /dev/null

ping() { [ $# -eq 0 ] && set mitchweaver.xyz
             cmd ping -c 1 -n -s 32 -w 10 $1 | \
                head -n 2 ; }

has nasm &&
    nasm() { [ -f "$1" ] &&
                cmd nasm -f elf32 -g -F dwarf "$1" &&
                    ld -m elf_i386 "${1%.*}.o" -o "${1%.*}" &&
                        ./"${1%.*}" ; }

has w3m && 
    w3m() { [ $# -eq 0 ] && set https://ddg.gg/lite
                cmd w3m -F $* ; }

exists ~/bin/bar &&
    bar() { k -9 {bar,lemonbar} > /dev/null 2>&1
                ~/bin/bar & c ; }

exists ~/bin/conv &&
    for i in dec bin hex oct ; do
        for j in dec bin hex oct ; do
            [ $i != $j ] &&
                a ${i}2${j}="dash ~/bin/conv \
                    -i $(printf %.1s $i) \
                    -o $(echo -n ${j%??} | sed 's/.*2//')"
        done
    done

has vi || has busybox &&
{
	alias vi='busybox vi'
}

v() { 
    [ $# -eq 0 ] && 
        [ -d ${HOME}/var/files/vimwiki ] &&
            { has nvim || has vim ; } &&
                set -- -c VimwikiIndex
    if has nvim ; then
        cmd nvim -p "$@"
    elif has vim ; then
        cmd vim -p "$@"
    elif has vi ; then
        cmd vi "$@"
    fi
}

has ranger &&
    r() { ranger "$@" ; c ; }

has youtube-viewer &&
    { a yt="c; youtube-viewer -C -q --vd=high"
      a ytm="c;yt -n"
      a ytdv="c;yt -d"
      a ytdm='c;yt -n -d --convert-to=opus \
          --convert-cmd="ffmpeg -loglevel -8 -i \
          file:*IN* -vn -acodec libopus -ab 128k -y *OUT*"'
      a ytsubs='c;yt --subs-videos --subs-order=unread'
      a ytchans='c;yt --subscriptions'
      a ytfavs='c;yt --favorites=mine'
      a ytme='c;yt --channel-videos=mine' ; }

has mpv &&
    mpv() { 
        [ $# -eq 0 ] && return 1
        if [ "$(pgrep xwinwrap)" ] ; then
            kill $(pg mpv | grep -v $(pg -P \
                $(cat ${HOME}/.cache/mpvbg.pid))) \
                    > /dev/null 2>&1
        else
            pkill -9 mpv
        fi
        cmd mpv --title=mpv "$@" & x
    }

has youtube-dl &&
    { mpvyt()  { mpv ytdl://ytsearch:"$@" ; }
      mpvytm() { mpv --no-video ytdl://ytsearch:"$@" ; }
      a ytdl='youtube-dl --geo-bypass --prefer-ffmpeg'
      a ytdlm='ytdl --extract-audio --audio-quality 0 \
                   --audio-format opus' ; }

has mogrify &&
    { a 50%='mogrify -resize 50%X50%'
      a 25%='mogrify -resize 25%X25%'
      import() { cmd import -quiet -silent -window root \
                     -quality 100 ~/import.png ; } ; }

has git &&
{
    for i in init log fetch pull \
             branch clone help \
             stash blame clean ; do
        a g${i}="git $i"
    done
    a gmote='git remote add origin'
    a gstat='git status'
    a gbort='git rebase --abort'
    a gcherry='git cherry-pick'
    a gsub='git submodule'
    a {gcheck,checkout}='git checkout'
    gup() { 
        git add -A &&
        git commit -m "$@" &&
        git push -u origin $(git branch 2> /dev/null | \
            sed -e '/^[^*]/d' | sed 's/* //')
    }
    gadd() { [ $# -eq 0 ] && set -- -A ; git add "$@" ; }
    gmit() { 
        if [ $# -eq 1 ] ; then
            git add -A &&
            git commit -m "$@"
        elif [ $# -gt 1 ] ; then
            git add "$1" &&
            shift &&
            git commit -m "$@"
        fi
    }
    gout() { git push -u origin $(git rev-parse \
                 --abbrev-ref HEAD) "$@" ; }
    gdiff() { [ $# -eq 0 ] && set master
              git diff origin/"$1" ; }
    greset() { [ $# -eq 0 ] && set 10
               git reset --hard HEAD~"$1" ; }
    gbase() { [ $# -eq 0 ] && set 5
              git rebase -i HEAD~$1 ; }
    ghclone() { git clone https://github.com/"$1" ; }
    gtmp() { 
        [ $# -eq 0 ] && set "/tmp/$(basename ${PWD})-repo"
        git init --bare "$1" &&
        git init .
        git remote add origin "$1" &&
        git add -A &&
        git commit -m "initial commit" &&
        git push -u origin master
    }
}

wlibc() { 
    set $(strings -a "$1")
    for i in musl glibc llvm ; do
        echo "$@" | grep -oi $i && break
    done | head -n 1 
}

a {..,cd..}='cd ..'
a ...='.. ; ..'

_g() { local a=$1 ; shift ; cd $a/"$@" ; cl ;  }

for i in bin env etc tmp usr var src ; do
    exists ~/$i &&
        a g$(printf %.1s $i)="_g ~/$i"
    a g$(printf %.1s $i | tr [a-z] [A-Z])="_g /$i"
done

a gM='_g /mnt'
m~() { mv "$@" ~     ; }
Y~() { cp "$@" ~     ; }
mT() { mv "$@" /tmp  ; }
YT() { cp "$@" /tmp  ; }

exists ~/var && {
    for i in downloads files images music ; do
        a g$(printf %.1s $i)="_g ~/var/$i"
    done

    a gvi='_g ~/var/videos'
    a gbk='_g ~/var/books'
    a gvt='_g ~/var/tmp'
    a gyt='_g ~/var/youtube-dl'

    Yf() { cp "$@" ~/var/files     ; }
    Yd() { cp "$@" ~/var/downloads ; }
    Yi() { cp "$@" ~/var/images    ; }
    Ym() { cp "$@" ~/var/music     ; }
    Yvi(){ cp "$@" ~/var/videos    ; }

    mf() { mv "$@" ~/var/files     ; }
    md() { mv "$@" ~/var/downloads ; }
    mi() { mv "$@" ~/var/images    ; }
    mm() { mv "$@" ~/var/music     ; }
    mvi(){ mv "$@" ~/var/videos    ; }
}
exists ~/usr && {
    a gr='_g ~/usr/repos' 
    a gbkup='_g ~/usr/backup'
    mu() { mv "$@" ~/usr ; }
    mr() { mv "$@" ~/usr/repos ; }
    Yu() { cp "$@" ~/usr ; }
    Yr() { cp "$@" ~/usr/repos ; }
}
exists ~/etc && {
    me() { mv "$@" ~/etc ; }
    Ye() { cp "$@" ~/etc ; }
    a gcf='_g ~/etc/config'

    a {aliases,alaises,aliase}='v ~/etc/aliases'
    a profile='v ~/etc/profile'
    a {bmk,bmks}='v ~/var/files/bookmarks/bookmarks.txt'
    a vssh='v ~/.ssh/config'

    for i in vim ksh xinit ; do
        a ${i}rc="v ~/etc/${i}rc"
    done

    for i in dwm st surf tabbed dmenu ; do
        a ${i}cfg="v ~/etc/suckless/$i/config.h"
        a ${i}c="v ~/etc/suckless/$i/$i.c"
    done
    recomp() { for i ; do
                   sudo ~/bin/recomp ~/etc/suckless/$i
               done ; }
}
exists ~/src && { a gs='_g ~/src'
                  ms() { mv "$@" ~/src  ; }
                  Ys() { cp "$@" ~/src ; } ; }

exists ~/bin && { mb() { mv "$@" ~/bin ; }
                  Yb() { cp "$@" ~/bin ; } ; }

exists ~/tmp && { mt() { mv "$@" ~/tmp ; }
                  Yt() { cp "$@" ~/tmp ; } ; }

exists ~/env && { mn() { mv "$@" ~/env ; }
                  Yn() { cp "$@" ~/env ; } ; }

u i j _u _p _h
